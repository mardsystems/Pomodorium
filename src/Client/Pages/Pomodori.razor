@page "/pomodori"
@using MediatR;
@using Pomodorium.Modules.Pomodori;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.EventStore;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@inject IMediator Mediator
@inject IStringLocalizer<SharedResource> SharedResource;

<PageTitle>Pomodori</PageTitle>

<h1>Pomodori</h1>

<p role="status">Total: @_pomodori?.Count</p>

<a class="btn btn-primary" href="pomodori/new">@SharedResource["Add New"]</a>

<button class="btn btn-primary" @onclick="Add">@SharedResource["Add"]</button>

@if (_pomodori == null)
{
    <p><em>@SharedResource["Loading"]...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Start Date Time</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pomodoro in _pomodori)
            {
                <tr>
                    <td>&nbsp;</td>
                    <td>@pomodoro.StartDateTime</td>
                    <td>@pomodoro.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ObservableCollection<PomodoroQueryItem>? _pomodori;

    protected override async Task OnInitializedAsync()
    {
        _pomodori = new ObservableCollection<PomodoroQueryItem>();

        var x = Observable.FromEventPattern<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>(h => _pomodori.CollectionChanged += h, h => _pomodori.CollectionChanged -= h)
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe((x) =>
            {
                StateHasChanged();
            });

        await Refresh();
    }

    private async Task Refresh()
    {
        var request = new GetPomodoriRequest { };

        var response = await Mediator.Send<GetPomodoriResponse>(request);

        _pomodori.Clear();

        foreach (var item in response.PomodoroQueryItems)
        {
            _pomodori.Add(item);
        }
    }

    private async Task Add()
    {
        var now = DateTime.Now;

        var request = new PostPomodoroRequest
            {
                StartDateTime = now,
                Description = Guid.NewGuid().ToString()
            };

        var response = await Mediator.Send<PostPomodoroResponse>(request);

        await Refresh();
    }
}
