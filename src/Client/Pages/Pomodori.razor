@page "/pomodori"
@using Pomodorium.Modules.Pomodori;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.EventStore;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@inject PomodoroQueryDbService PomodoroQueryDbService;
@inject PomodoroRepository PomodoroRepository;
@inject IStringLocalizer<SharedResource> SharedResource;

<PageTitle>Pomodori</PageTitle>

<h1>Pomodori</h1>

<p role="status">Total: @_pomodori.Count</p>

<button class="btn btn-primary" @onclick="AddNew">@SharedResource["Add New"]</button>

@if (_pomodori == null)
{
    <p><em>@SharedResource["Loading"]...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Start Date Time</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pomodoro in _pomodori)
            {
                <tr>
                    <td>&nbsp;</td>
                    <td>@pomodoro.StartDateTime</td>
                    <td>@pomodoro.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ObservableCollection<PomodoroQueryItem>? _pomodori;

    protected override async Task OnInitializedAsync()
    {
        _pomodori = await PomodoroQueryDbService.QueryPomodoroItems();

        var x = Observable.FromEventPattern<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>(h => _pomodori.CollectionChanged += h, h => _pomodori.CollectionChanged -= h)
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe((x) =>
            {
                StateHasChanged();
            });
    }

    private async Task AddNew()
    {
        var id = new PomodoroId(Guid.NewGuid().ToString());

        var now = DateTime.Now;

        var pomodoro = new Pomodoro(id, now, id.ToString());

        await PomodoroRepository.Add(pomodoro);
    }
}
