@page "/flows"
@using MediatR;
@using Pomodorium.Hubs;
@using Pomodorium.Modules.Flows;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Subjects;
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject EventHubClient EventHubClient
@inject IStringLocalizer<SharedResource> SharedResource

<PageTitle>Flows</PageTitle>

<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
    <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="Refresh" />
    <MudSpacer />
    <MudText Typo="Typo.button" Class="mx-4" Style="text-wrap: nowrap">Total: @_items?.Count</MudText>
    <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
</MudToolBar>

<MudContainer MaxWidth="MaxWidth.Large">
    @if (_items == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="_items" Hover="true" Striped="true" SortLabel="@SharedResource["Sort By"]" @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent" T="FlowtimeQueryItem" Style="cursor: pointer">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FlowtimeQueryItem, object>(x => x.State!)">@SharedResource["State"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FlowtimeQueryItem, object>(x => x.TaskDescription!)">@SharedResource["Task"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FlowtimeQueryItem, object>(x => x.StartDateTime)" InitialDirection="SortDirection.Ascending">@SharedResource["Start Date Time"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FlowtimeQueryItem, object>(x => x.StopDateTime)">@SharedResource["Stop Date Time"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FlowtimeQueryItem, object>(x => x.Interrupted)">@SharedResource["Interrupted?"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FlowtimeQueryItem, object>(x => x.Worktime)">@SharedResource["Worktime"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<FlowtimeQueryItem, object>(x => x.Breaktime!)">@SharedResource["Breaktime"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="white-space: nowrap; justify-content: center">
                    <MudIconButton Icon="@Icons.Material.Outlined.Start" OnClick="@(() => Start(context.Id, context.Version))">@SharedResource["Start"]</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Outlined.Stop" OnClick="@(() => Stop(context.Id, context.Version))">@SharedResource["Stop"]</MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Outlined.Archive" OnClick="@(() => Archive(context.Id, context.Version))">@SharedResource["Archive"]</MudIconButton>
                </MudTd>
                <MudTd DataLabel="@SharedResource["State"]">@context.State</MudTd>
                <MudTd DataLabel="@SharedResource["Task"]">@context.TaskDescription</MudTd>
                <MudTd DataLabel="@SharedResource["Start Date Time"]">@context.StartDateTime</MudTd>
                <MudTd DataLabel="@SharedResource["Stop Date Time"]">@context.StopDateTime</MudTd>
                <MudTd DataLabel="@SharedResource["Interrupted?"]">@context.Interrupted</MudTd>
                <MudTd DataLabel="@SharedResource["Worktime"]">@context.Worktime</MudTd>
                <MudTd DataLabel="@SharedResource["Breaktime"]">@context.Breaktime</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private readonly ObservableCollection<FlowtimeQueryItem>? _items = new ObservableCollection<FlowtimeQueryItem>();

    private MudTable<FlowtimeQueryItem> mudTable;

    private int selectedRowNumber = -1;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        var x = Observable.FromEventPattern<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>(h => _items.CollectionChanged += h, h => _items.CollectionChanged -= h)
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe((x) =>
            {
                StateHasChanged();
            });

        var y = EventHubClient.Notification
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe(async (x) =>
            {
                await Refresh();
            });

        await Refresh();
    }

    private async System.Threading.Tasks.Task Refresh()
    {
        var request = new GetFlowsRequest { };

        var response = await Mediator.Send<GetFlowsResponse>(request);

        _items.Clear();

        foreach (var item in response.FlowtimeQueryItems)
        {
            _items.Add(item);
        }
    }

    private async System.Threading.Tasks.Task Add()
    {
        NavigationManager.NavigateTo($"/flows/new");
    }

    private async System.Threading.Tasks.Task Start(Guid id, long version)
    {
        var request = new StartFlowtimeRequest
            {
                Id = id,
                StartDateTime = DateTime.Now,
                Version = version
            };

        var response = await Mediator.Send<StartFlowtimeResponse>(request);

        await Refresh();
    }

    private async System.Threading.Tasks.Task Stop(Guid id, long version)
    {
        var request = new StopFlowtimeRequest
            {
                Id = id,
                StopDateTime = DateTime.Now,
                Version = version
            };

        var response = await Mediator.Send<StopFlowtimeResponse>(request);

        await Refresh();
    }

    private async System.Threading.Tasks.Task Archive(Guid id, long version)
    {
        var request = new ArchiveFlowtimeRequest
            {
                Id = id,
                Version = version
            };

        var response = await Mediator.Send<ArchiveFlowtimeResponse>(request);

        await Refresh();
    }

    private void RowClickEvent(TableRowClickEventArgs<FlowtimeQueryItem> e)
    {
        // clickedEvents.Add("Row has been clicked");
    }

    private string SelectedRowClassFunc(FlowtimeQueryItem element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            // clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            // clickedEvents.Add($"Selected Row: {rowNumber}");

            NavigationManager.NavigateTo($"/flows/{mudTable.SelectedItem.Id}");

            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
