@page "/flows"
@using MediatR;
@using Pomodorium.Hubs;
@using Pomodorium.Modules.Flows;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Subjects;
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@inject EventHubClient EventHubClient
@inject IStringLocalizer<SharedResource> SharedResource

<PageTitle>Flows</PageTitle>

<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
    <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="Refresh" />
    @if (_selectedItems.Any())
    {
        <MudIconButton Icon="@Icons.Material.Outlined.Archive" OnClick="Archive">@SharedResource["Archive"]</MudIconButton>
    }
    <MudSpacer />
    <MudText Typo="Typo.button" Class="mx-4" Style="text-wrap: nowrap">Total: @Model.Items?.Count</MudText>
    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
        <MudMenuItem OnClick="@(() => _dataGridDense = !_dataGridDense)">Dense: @(_dataGridDense ? "On" : "Off")</MudMenuItem>
        </MudMenu>
    </MudToolBar>

    <MudContainer MaxWidth="MaxWidth.Large" Class="mb-4">
        <MudDataGrid Style="white-space: nowrap"
                     Groupable="true" Items="Model.Items" Dense="_dataGridDense" Hover="true" Striped="true" MultiSelection="true"
                     SelectOnRowClick="false" T="IndexViewModel.Item" @bind-SelectedItems="_selectedItems">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Flows</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="IndexViewModel.Item" />
                <TemplateColumn Title="@SharedResource["State"]">
                    <CellTemplate>
                        <MudText Class="d-flex">
                            @if (@context.Item.State == FlowtimeState.NotStarted)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.PauseCircle" Title="Not Started" />
                        }
                        else if (@context.Item.State == FlowtimeState.Flow)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.ArrowCircleRight" Color="Color.Info" Title="Flow" />
                        }
                        else if (@context.Item.State == FlowtimeState.Stopped)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.CheckCircle" Color="Color.Success" Title="Stopped" />
                        }
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TaskDescription" Title="@SharedResource["Task"]" />
            <PropertyColumn Property="x => x.StartDateTime" Title="@SharedResource["Start Date Time"]" />
            <PropertyColumn Property="x => x.StopDateTime" Title="@SharedResource["Stop Date Time"]" />
            <PropertyColumn Property="x => x.Interrupted" Title="@SharedResource["-|"]" />
            <PropertyColumn Property="x => x.Worktime" Title="@SharedResource["Worktime"]" />
            <PropertyColumn Property="x => x.Breaktime" Title="@SharedResource["Breaktime"]" />
            <TemplateColumn StickyRight="true" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => Details(context.Item.Id))">@SharedResource["Details"]</MudIconButton>
                    @if (context.Item.State == FlowtimeState.NotStarted)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.PlayArrow" OnClick="@(() => Start(context.Item.Id, context.Item.Version))">@SharedResource["Start"]</MudIconButton>
                    }
                    else if (context.Item.State == FlowtimeState.Flow)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Stop" OnClick="@(() => Stop(context.Item.Id, context.Item.Version))">@SharedResource["Stop"]</MudIconButton>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    private IndexViewModel? Model = new();

    private string _searchString;

    private bool _dataGridDense = false;

    private MudTable<IndexViewModel.Item> _mudTable;

    private int _selectedRowNumber = -1;

    private HashSet<IndexViewModel.Item> _selectedItems = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Model.ItemsChanged.Subscribe((x) =>
            {
                StateHasChanged();
            });

        Model.BreakCountdownChanges.Subscribe(x =>
        {
            StateHasChanged();
        });

        EventHubClient.Notification
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe(async (x) =>
            {
                await Refresh();
            });

        await Refresh();
    }

    private async System.Threading.Tasks.Task Refresh()
    {
        var request = new GetFlowsRequest { };

        var response = await Mediator.Send<GetFlowsResponse>(request);

        Model.Repopulate(response.FlowtimeQueryItems);
    }

    private async System.Threading.Tasks.Task Add()
    {
        NavigationManager.NavigateTo($"/flows/new");
    }

    private async System.Threading.Tasks.Task Details(Guid id)
    {
        NavigationManager.NavigateTo($"/flows/{id}");
    }

    private async System.Threading.Tasks.Task Start(Guid id, long version)
    {
        var request = new StartFlowtimeRequest
            {
                Id = id,
                StartDateTime = DateTime.Now,
                Version = version
            };

        var response = await Mediator.Send<StartFlowtimeResponse>(request);

        await Refresh();
    }

    private async System.Threading.Tasks.Task Stop(Guid id, long version)
    {
        var request = new StopFlowtimeRequest
            {
                Id = id,
                StopDateTime = DateTime.Now,
                Version = version
            };

        var response = await Mediator.Send<StopFlowtimeResponse>(request);

        await Refresh();
    }

    private async System.Threading.Tasks.Task Archive()
    {
        foreach (var item in _selectedItems)
        {
            var request = new ArchiveFlowtimeRequest
                {
                    Id = item.Id,
                    Version = item.Version
                };

            var response = await Mediator.Send<ArchiveFlowtimeResponse>(request);
        }

        await Refresh();
    }
}
