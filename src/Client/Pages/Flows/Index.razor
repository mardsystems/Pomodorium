@page "/flows"
@using MediatR;
@using Microsoft.AspNetCore.Authorization
@using Pomodorium.Enums
@using Pomodorium.Hubs;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Subjects;
@using Pomodorium.Features.FlowTimer
@attribute [Authorize]
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@* @inject EventHubClient EventHubClient *@
@inject IStringLocalizer<SharedResource> SharedResource

<PageTitle>Flows</PageTitle>

<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
    <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="Refresh" />
    @if (_selectedItems.Any())
    {
        <MudIconButton Icon="@Icons.Material.Outlined.Archive" OnClick="Archive">@SharedResource["Archive"]</MudIconButton>
    }
    <MudSpacer />
    <MudText Typo="Typo.button" Class="mx-4" Style="text-wrap: nowrap">Total: @_model.Items?.Count</MudText>
        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
            <MudMenuItem OnClick="@(() => _dense = !_dense)">Dense: @(_dense ? "On" : "Off")</MudMenuItem>
        </MudMenu>
    </MudToolBar>

    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mb-4">
        @if (_model.Items == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="_model.Items" Hover="true" Striped="true" Loading="_loading" Dense="_dense" MultiSelection="true" SortLabel="@SharedResource["Sort By"]" @ref="_mudTable" T="IndexViewModel.Item" @bind-SelectedItems="_selectedItems" Style="white-space: nowrap">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Flows</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>@SharedResource["State"]</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.TaskDescription!)">@SharedResource["Task"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.StartDateTime)">@SharedResource["Start Date Time"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.StopDateTime)">@SharedResource["Stop Date Time"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.Interrupted)">@SharedResource["Interrupted?"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.Worktime)">@SharedResource["Worktime"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.Breaktime)">@SharedResource["Breaktime"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.CreationDate)" InitialDirection="SortDirection.Descending">@SharedResource["Creation Date"]</MudTableSortLabel></MudTh>
                    <MudTh>@SharedResource["Actions"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd Style="white-space: nowrap; justify-content: center">
                        <MudText Class="d-flex">
                            @if (@context.State == FlowtimeStateEnum.NotStarted)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.PauseCircle" Title="Not Started" />
                        }
                        else if (@context.State == FlowtimeStateEnum.Flow)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.ArrowCircleRight" Color="Color.Info" Title="Flow" />
                        }
                        else if (@context.State == FlowtimeStateEnum.Stopped)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.CheckCircle" Color="Color.Success" Title="Stopped" />
                        }
                        @* <MudIconButton Icon="@Icons.Material.Outlined.Archive" OnClick="@(() => Archive(context.Id, context.Version))">@SharedResource["Archive"]</MudIconButton> *@
                    </MudText>
                </MudTd>
                <MudTd DataLabel="@SharedResource["Task"]">@context.TaskDescription</MudTd>
                    <MudTd DataLabel="@SharedResource["Start Date Time"]">@context.StartDateTime</MudTd>
                    <MudTd DataLabel="@SharedResource["Stop Date Time"]">@context.StopDateTime</MudTd>
                    <MudTd DataLabel="@SharedResource["Interrupted?"]">@context.Interrupted</MudTd>
                    <MudTd DataLabel="@SharedResource["Worktime"]">@context.Worktime</MudTd>
                    <MudTd DataLabel="@SharedResource["Breaktime"]">@context.Breaktime</MudTd>
                    <MudTd DataLabel="@SharedResource["Creation Date"]">@context.CreationDate</MudTd>
                    <MudTd>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Add" OnClick="@(() => Continue(context.TaskId))"></MudIconButton>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => Details(context.Id))"></MudIconButton>
                        @if (context.State == FlowtimeStateEnum.NotStarted)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.PlayArrow" OnClick="@(() => Start(context.Id, context.Version))"></MudIconButton>
                    }
                    else if (context.State == FlowtimeStateEnum.Flow)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Stop" OnClick="@(() => Stop(context.Id, context.Version))"></MudIconButton>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Pause" OnClick="@(() => Interrupt(context.Id, context.Version))"></MudIconButton>
                    }
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private IndexViewModel _model = new();

    private MudTable<IndexViewModel.Item> _mudTable;

    private bool _loading;

    private bool _dense = false;

    private string _searchString;

    private HashSet<IndexViewModel.Item> _selectedItems = new();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        _model.ItemsChanged.Subscribe((x) =>
            {
                StateHasChanged();
            });

        _model.BreakCountdownChanges.Subscribe(x =>
        {
            StateHasChanged();
        });

        // EventHubClient.Notification
        //     .Throttle(TimeSpan.FromSeconds(1))
        //     .Subscribe(async (x) =>
        //     {
        //         await Refresh();
        //     });

        await Refresh();
    }

    private async System.Threading.Tasks.Task Refresh()
    {
        _loading = true;

        var request = new FlowtimeQueryRequest();

        var response = await Mediator.Send<FlowtimeQueryResponse>(request);

        _model.Repopulate(response.FlowtimeQueryItems);

        _loading = false;
    }

    private async System.Threading.Tasks.Task Add()
    {
        NavigationManager.NavigateTo($"/flows/new");

        await Task.CompletedTask;
    }

    private async System.Threading.Tasks.Task Details(Guid id)
    {
        NavigationManager.NavigateTo($"/flows/{id}");

        await Task.CompletedTask;
    }

    private async System.Threading.Tasks.Task Continue(Guid taskId)
    {
        NavigationManager.NavigateTo($"/flows/continuation?TaskId={taskId}");

        await Task.CompletedTask;
    }

    private async System.Threading.Tasks.Task Start(Guid id, long version)
    {
        _loading = true;

        var request = new FlowtimeStartRequest
            {
                FlowtimeId = id,
                FlowtimeVersion = version
            };

        var response = await Mediator.Send<FlowtimeStartResponse>(request);

        await Refresh();
        
        _loading = false;
    }

    private async System.Threading.Tasks.Task Interrupt(Guid id, long version)
    {
        _loading = true;

        var request = new FlowtimeInterruptionRequest
            {
                FlowtimeId = id,
                FlowtimeVersion = version
            };

        var response = await Mediator.Send<FlowtimeInterruptionResponse>(request);

        await Refresh();

        _loading = false;
    }

    private async System.Threading.Tasks.Task Stop(Guid id, long version)
    {
        _loading = true;

        var request = new FlowtimeStopRequest
            {
                FlowtimeId = id,
                FlowtimeVersion = version
            };


        var response = await Mediator.Send<FlowtimeStopResponse>(request);

        await Refresh();

        _loading = false;
    }

    private async System.Threading.Tasks.Task Archive()
    {
        _loading = true;

        foreach (var item in _selectedItems)
        {
            var request = new FlowtimeArchivingRequest
                {
                    FlowtimeId = item.Id,
                    FlowtimeVersion = item.Version
                };

            var response = await Mediator.Send<FlowtimeArchivingResponse>(request);
        }

        await Refresh();

        _loading = false;
    }
}
