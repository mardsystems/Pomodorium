@page "/flows/{Id}"
@using MediatR;
@using Pomodorium.Modules.Flows;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@inject IMediator Mediator
@inject IStringLocalizer<SharedResource> SharedResource;
@inject NavigationManager Navigation;

<PageTitle>Flowtime</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (Model == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField @bind-Value="Model.Id" Label="@SharedResource["Id"]" For="@(() => Model.Id)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.State" Label="@SharedResource["State"]" For="@(() => Model.State)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.TaskId" Label="@SharedResource["TaskId"]" For="@(() => Model.TaskId)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.TaskDescription" Label="@SharedResource["Task"]" For="@(() => Model.TaskDescription)" />
                            <MudTextField @bind-Value="Model.TaskVersion" Label="@SharedResource["Task Version"]" For="@(() => Model.TaskVersion)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudDatePicker @bind-Date="Model.StartDate" Label="@SharedResource["Start Date"]" For="@(() => Model.StartDate)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTimePicker @bind-Time="Model.StartTime" Label="@SharedResource["Start Time"]" For="@(() => Model.StartTime)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudDatePicker @bind-Date="Model.StopDate" Label="@SharedResource["Stop Date"]" For="@(() => Model.StopDate)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTimePicker @bind-Time="Model.StopTime" Label="@SharedResource["Stop Time"]" For="@(() => Model.StopTime)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudCheckBox @bind-Checked="Model.Interrupted" Label="@SharedResource["Interrupted?"]" For="@(() => Model.Interrupted)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTimePicker @bind-Time="Model.Worktime" Label="@SharedResource["Worktime"]" For="@(() => Model.Worktime)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.BreakCountdown" Label="@SharedResource["Breaktime"]" For="@(() => Model.Breaktime)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.CreationDate" Label="@SharedResource["Creation Date"]" For="@(() => Model.CreationDate)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.Version" Label="@SharedResource["Version"]" For="@(() => Model.Version)" ReadOnly="true" Variant="Variant.Filled" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Color="Color.Error" OnClick="Archive" Class="ms-auto me-2">@SharedResource["Archive"]</MudButton>
                            @if (Model.State == FlowtimeState.NotStarted)
                            {
                                <MudButton OnClick="Start" Class="me-2">@SharedResource["Start"]</MudButton>
                            }
                            else if (Model.State == FlowtimeState.Flow)
                            {
                                <MudButton OnClick="Stop" Class="me-2">@SharedResource["Stop"]</MudButton>
                            }
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">@SharedResource["Save"]</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">@SharedResource["Validation Summary"]</MudText>
                        @if (_success)
                        {
                            <MudText Color="Color.Success">@SharedResource["Success"]</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public Guid? TaskId { get; set; }

    public DetailsViewModel? Model { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    private bool _success;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (Id == null || Id == "new")
        {
            Model = new DetailsViewModel();
        }
        else if (Id == "continuation")
        {
            var request = new GetTaskRequest { Id = TaskId.Value };

            var response = await Mediator.Send<GetTaskResponse>(request);

            Model = new DetailsViewModel(
                response.TaskDetails.Id,
                response.TaskDetails.Description,
                response.TaskDetails.Version
            );
        }
        else
        {
            var request = new GetFlowtimeRequest { Id = Guid.Parse(Id) };

            var response = await Mediator.Send<GetFlowtimeResponse>(request);

            Model = new DetailsViewModel(
                response.FlowtimeDetails.Id,
                response.FlowtimeDetails.CreationDate,
                response.FlowtimeDetails.TaskId,
                response.FlowtimeDetails.TaskDescription,
                response.FlowtimeDetails.TaskVersion,
                response.FlowtimeDetails.StartDateTime,
                response.FlowtimeDetails.StopDateTime,
                response.FlowtimeDetails.Interrupted,
                response.FlowtimeDetails.Worktime,
                response.FlowtimeDetails.Breaktime,
                response.FlowtimeDetails.State,
                response.FlowtimeDetails.Version);

            Model.BreakCountdownChanges.Subscribe(x =>
            {
                StateHasChanged();
            });
        }
    }

    private async System.Threading.Tasks.Task OnValidSubmit(EditContext context)
    {
        await Save();

        _success = true;

        StateHasChanged();
    }

    private async System.Threading.Tasks.Task Start()
    {
        var request = new StartFlowtimeRequest
            {
                Id = Model.Id,
                StartDateTime = DateTime.Now,
                Version = Model.Version
            };

        var response = await Mediator.Send<StartFlowtimeResponse>(request);

        Navigation.NavigateTo("flows");
    }

    private async System.Threading.Tasks.Task Stop()
    {
        var request = new StopFlowtimeRequest
            {
                Id = Model.Id,
                StopDateTime = DateTime.Now,
                Version = Model.Version
            };

        var response = await Mediator.Send<StopFlowtimeResponse>(request);

        Navigation.NavigateTo("flows");
    }

    private async System.Threading.Tasks.Task Save()
    {
        if (Id == null || Id == "new")
        {
            var now = DateTime.Now;

            var request = new CreateFlowtimeRequest
                {
                    TaskDescription = Model.TaskDescription
                };

            var response = await Mediator.Send<CreateFlowtimeResponse>(request);
        }
        else if (Id == "continuation")
        {
            var now = DateTime.Now;

            var request = new CreateFlowtimeRequest
                {
                    TaskId = Model.TaskId,
                    TaskDescription = Model.TaskDescription,
                    TaskVersion = Model.TaskVersion
                };

            var response = await Mediator.Send<CreateFlowtimeResponse>(request);
        }
        else
        {
            var now = DateTime.Now;

            var request = new ChangeTaskDescriptionRequest
                {
                    TaskId = Model.TaskId,
                    TaskDescription = Model.TaskDescription,
                    TaskVersion = Model.TaskVersion
                };

            var response = await Mediator.Send<ChangeTaskDescriptionResponse>(request);
        }

        Navigation.NavigateTo("flows");
    }

    private async System.Threading.Tasks.Task Archive()
    {
        if (Id == null || Id == "new")
        {
            return;
        }

        var request = new ArchiveFlowtimeRequest
            {
                Id = Guid.Parse(Id),
                Version = Model.Version
            };

        var response = await Mediator.Send<ArchiveFlowtimeResponse>(request);

        Navigation.NavigateTo("flows");
    }
}
