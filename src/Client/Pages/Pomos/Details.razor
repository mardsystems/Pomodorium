@page "/pomos/{Id}"
@using MediatR;
@using Pomodorium.Enums
@using Pomodorium.PomodoroTechnique.Model
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using Pomodorium.Features.PomodoroTimer
@inject IMediator Mediator
@inject IStringLocalizer<SharedResource> SharedResource;
@inject NavigationManager Navigation;

<PageTitle>Pomodoro</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    @if (Model == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <EditForm Model="@Model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField @bind-Value="Model.Id" Label="@SharedResource["Id"]" For="@(() => Model.Id)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.State" Label="@SharedResource["State"]" For="@(() => Model.State)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.Task" Label="@SharedResource["Task"]" For="@(() => Model.Task)" />
                            <MudDatePicker @bind-Date="Model.StartDate" Label="@SharedResource["Start Date"]" For="@(() => Model.StartDate)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTimePicker @bind-Time="Model.StartTime" Label="@SharedResource["Start Time"]" For="@(() => Model.StartTime)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudDatePicker @bind-Date="Model.StopDate" Label="@SharedResource["Stop Date"]" For="@(() => Model.StopDate)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTimePicker @bind-Time="Model.StopTime" Label="@SharedResource["Stop Time"]" For="@(() => Model.StopTime)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTimePicker @bind-Time="Model.Timer" Label="@SharedResource["Timer"]" For="@(() => Model.Timer)" />
                            <MudTimePicker @bind-Time="Model.Countdown" Label="@SharedResource["Countdown"]" For="@(() => Model.Countdown)" ReadOnly="true" Variant="Variant.Filled" />
                            <MudTextField @bind-Value="Model.Version" Label="@SharedResource["Version"]" For="@(() => Model.Version)" ReadOnly="true" Variant="Variant.Filled" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Color="Color.Error" OnClick="Archive" Class="ms-auto me-2">@SharedResource["Archive"]</MudButton>
                            @if (Model.State == PomodoroStateEnum.Stopped)
                            {
                                <MudButton Color="Color.Success" OnClick="Check" Class="me-2">@SharedResource["Check"]</MudButton>
                            }
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">@SharedResource["Save"]</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">@SharedResource["Validation Summary"]</MudText>
                        @if (_success)
                        {
                            <MudText Color="Color.Success">@SharedResource["Success"]</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public string? Id { get; set; }

    public DetailsViewModel? Model { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    private bool _success;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null || Id == "new")
        {
            Model = new DetailsViewModel();
        }
        else
        {
            var request = new GetPomodoroRequest { Id = Guid.Parse(Id) };

            var response = await Mediator.Send<GetPomodoroResponse>(request);

            Model = new DetailsViewModel(
                response.PomodoroDetails.Id,
                response.PomodoroDetails.Task,
                response.PomodoroDetails.Timer,
                response.PomodoroDetails.StartDateTime,
                response.PomodoroDetails.State,
                response.PomodoroDetails.Version);

            Model.CountdownChanges.Subscribe(x =>
            {
                StateHasChanged();
            });
        }
    }

    private async Task Check()
    {
        var request = new CheckPomodoroRequest
            {
                Id = Guid.Parse(Id),
                Version = Model.Version
            };

        var response = await Mediator.Send<CheckPomodoroResponse>(request);

        Navigation.NavigateTo("pomos");
    }

    private async Task OnValidSubmit(EditContext context)
    {
        await Save();

        _success = true;

        StateHasChanged();
    }

    private async Task Save()
    {
        if (Id == null || Id == "new")
        {
            var request = new CreatePomodoroRequest
                {
                    Task = Model.Task,
                    Timer = Model.Timer.Value
                };

            var response = await Mediator.Send<CreatePomodoroResponse>(request);
        }
        else
        {
            var request = new RefinePomodoroTaskRequest
                {
                    Id = Guid.Parse(Id),
                    Task = Model.Task,
                    Version = Model.Version
                };

            var response = await Mediator.Send<RefinePomodoroTaskResponse>(request);
        }

        Navigation.NavigateTo("pomos");
    }

    private async Task Archive()
    {
        if (Id == null || Id == "new")
        {
            return;
        }

        var request = new ArchivePomodoroRequest
            {
                Id = Guid.Parse(Id),
                Version = Model.Version
            };

        var response = await Mediator.Send<ArchivePomodoroResponse>(request);

        Navigation.NavigateTo("pomos");
    }
}
