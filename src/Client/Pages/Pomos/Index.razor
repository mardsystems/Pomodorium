@page "/pomos"
@using MediatR;
@using Microsoft.AspNetCore.Authorization
@using Pomodorium.Hubs;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Subjects;
@using Pomodorium.Features.PomodoroTimer
@attribute [Authorize]
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@* @inject EventHubClient EventHubClient *@
@inject IStringLocalizer<SharedResource> SharedResource

<PageTitle>Pomos</PageTitle>

<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
    <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="Refresh" />
    <MudSpacer />
    <MudText Typo="Typo.button" Class="mx-4" Style="white-space: nowrap">Total: @_model.Items?.Count</MudText>
    <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
</MudToolBar>

<MudContainer MaxWidth="MaxWidth.Large">
    @if (_model.Items == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="_model.Items" Hover="true" Striped="true" SortLabel="@SharedResource["Sort By"]" @ref="_mudTable" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent" T="IndexViewModel.Item" Style="cursor: pointer">
            <HeaderContent>
                <MudTh></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.State!)">@SharedResource["State"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.Task!)">@SharedResource["Task"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.StartDateTime)" InitialDirection="SortDirection.Ascending">@SharedResource["Start Date Time"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.StopDateTime)">@SharedResource["Stop Date Time"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.Timer)">@SharedResource["Timer"]</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<IndexViewModel.Item, object>(x => x.Countdown)">@SharedResource["Countdown"]</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd Style="white-space: nowrap; justify-content: center">
                    <MudIconButton Icon="@Icons.Material.Outlined.Archive" OnClick="@(() => Archive(context.Id, context.Version))">@SharedResource["Archive"]</MudIconButton>
                </MudTd>
                <MudTd DataLabel="@SharedResource["State"]">@context.State</MudTd>
                <MudTd DataLabel="@SharedResource["Task"]">@context.Task</MudTd>
                <MudTd DataLabel="@SharedResource["Start Date Time"]">@context.StartDateTime</MudTd>
                <MudTd DataLabel="@SharedResource["Stop Date Time"]">@context.StopDateTime</MudTd>
                <MudTd DataLabel="@SharedResource["Timer"]">@context.Timer</MudTd>
                <MudTd DataLabel="@SharedResource["Countdown"]">@context.Countdown</MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private IndexViewModel _model = new();

    private MudTable<IndexViewModel.Item> _mudTable;

    private int _selectedRowNumber = -1;

    protected override async Task OnInitializedAsync()
    {
        _model.ItemsChanged.Subscribe((x) =>
            {
                StateHasChanged();
            });

        _model.CountdownChanges.Subscribe(x =>
        {
            StateHasChanged();
        });

        // EventHubClient.Notification
        //     .Throttle(TimeSpan.FromSeconds(1))
        //     .Subscribe(async (x) =>
        //     {
        //         await Refresh();
        //     });

        await Refresh();
    }

    private async Task Add()
    {
        NavigationManager.NavigateTo($"/pomos/new");

        await Task.CompletedTask;
    }

    private async Task Refresh()
    {
        var request = new PomodoroQueryRequest { };

        var response = await Mediator.Send<PomodoroQueryResponse>(request);

        _model.Repopulate(response.PomodoroQueryItems);
    }

    private async Task Add2()
    {
        var now = DateTime.Now;

        var request = new PomodoroCreationRequest
            {
                Timer = TimeSpan.FromMinutes(25),
                Task = now.ToString()
            };

        var response = await Mediator.Send<PomodoroCreationResponse>(request);

        await Refresh();
    }

    private async Task Archive(Guid id, long version)
    {
        var request = new PomodoroArchivingRequest
            {
                Id = id,
                Version = version
            };

        var response = await Mediator.Send<PomodoroArchivingResponse>(request);

        await Refresh();
    }

    private void RowClickEvent(TableRowClickEventArgs<IndexViewModel.Item> e)
    {
        // clickedEvents.Add("Row has been clicked");
    }

    private string SelectedRowClassFunc(IndexViewModel.Item element, int rowNumber)
    {
        if (_selectedRowNumber == rowNumber)
        {
            _selectedRowNumber = -1;
            // clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (_mudTable.SelectedItem != null && _mudTable.SelectedItem.Equals(element))
        {
            _selectedRowNumber = rowNumber;
            // clickedEvents.Add($"Selected Row: {rowNumber}");

            NavigationManager.NavigateTo($"/pomos/{_mudTable.SelectedItem.Id}");

            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
