@page "/pomos"
@using MediatR;
@using Pomodorium.Hubs;
@using Pomodorium.Modules.Pomos;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Subjects;
@inject IMediator Mediator
@inject EventHubClient EventHubClient
@inject IStringLocalizer<SharedResource> SharedResource

<PageTitle>Pomos</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/"><span class="oi oi-home" aria-hidden="true"></span></a></li>
        <li class="breadcrumb-item active" aria-current="page">Pomos</li>
    </ol>
</nav>

<h1>Pomos</h1>

<div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
    <div class="btn-group me-2" role="group" aria-label="First group">
        <a class="btn btn-primary" href="pomos/new">
            @SharedResource["Create New"]
        </a>
        <button class="btn btn-primary" @onclick="Add">
            <span class="oi oi-plus" aria-hidden="true"></span>
        </button>
        <button class="btn btn-primary" @onclick="Refresh">
            <span class="oi oi-reload" aria-hidden="true"></span>
        </button>
    </div>
    <div class="input-group">
        <span role="status">Total: @Model?.Items.Count</span>
    </div>
</div>

@if (Model.Items == null)
{
    <p><em>@SharedResource["Loading"]...</em></p>
}
else
{
    <div class="table-responsive text-nowrap">
        <table class="table table-striped align-middle">
            <thead>
                <tr>
                    <th>#</th>
                    <th>@SharedResource["State"]</th>
                    <th>@SharedResource["Task"]</th>
                    <th>@SharedResource["Start Date Time"]</th>
                    <th>@SharedResource["Stop Date Time"]</th>
                    <th>@SharedResource["Timer"]</th>
                    <th>@SharedResource["Countdown"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        <td>
                            <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                                <div class="btn-group me-2" role="group" aria-label="First group">
                                    <a class="btn btn-outline-secondary btn-sm" href=@($"pomos/{item.Id}")>
                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                    </a>
                                    <button class="btn btn-outline-danger btn-sm" onclick=@(() => Archive(item.Id, item.Version))>
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        </td>
                        <td>@item.State</td>
                        <td>@item.Task</td>
                        <td>@item.StartDateTime</td>
                        <td>@item.StopDateTime</td>
                        <td>@item.Timer</td>
                        <td>@item.Countdown</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IndexViewModel? Model;

    protected override async Task OnInitializedAsync()
    {
        Model = new IndexViewModel();

        Model.ItemsChanged.Subscribe((x) =>
            {
                StateHasChanged();
            });

        Model.CountdownChanges.Subscribe(x =>
        {
            StateHasChanged();
        });

        EventHubClient.Notification
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe(async (x) =>
            {
                await Refresh();
            });

        await Refresh();
    }

    private async Task Refresh()
    {
        var request = new GetPomosRequest { };

        var response = await Mediator.Send<GetPomosResponse>(request);

        Model.Repopulate(response.PomodoroQueryItems);
    }

    private async Task Add()
    {
        var now = DateTime.Now;

        var request = new CreatePomodoroRequest
            {
                Timer = TimeSpan.FromMinutes(25),
                Task = now.ToString()
            };

        var response = await Mediator.Send<CreatePomodoroResponse>(request);

        await Refresh();
    }

    private async Task Archive(Guid id, long version)
    {
        var request = new ArchivePomodoroRequest
            {
                Id = id,
                Version = version
            };

        var response = await Mediator.Send<ArchivePomodoroResponse>(request);

        await Refresh();
    }
}
