@page "/activities"
@using MediatR;
@using Pomodorium.Hubs;
@using Pomodorium.Modules.Activities;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Subjects;
@inject IMediator Mediator
@inject EventHubClient EventHubClient
@inject IStringLocalizer<SharedResource> SharedResource

<PageTitle>Activities</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/"><span class="oi oi-home" aria-hidden="true"></span></a></li>
        <li class="breadcrumb-item active" aria-current="page">Activities</li>
    </ol>
</nav>

<h1>Activities</h1>

<div class="btn-toolbar justify-content-between" role="toolbar" aria-label="Toolbar with button groups">
    <div class="btn-group me-2" role="group" aria-label="First group">
        <a class="btn btn-primary" href="activities/new">
            @SharedResource["Create New"]
        </a>
        <button class="btn btn-primary" @onclick="Add">
            <span class="oi oi-plus" aria-hidden="true"></span>
        </button>
        <button class="btn btn-primary" @onclick="Refresh">
            <span class="oi oi-reload" aria-hidden="true"></span>
        </button>
    </div>
    <div class="input-group">
        <span role="status">Total: @_items?.Count</span>
    </div>
</div>

@if (_items == null)
{
    <p><em>@SharedResource["Loading"]...</em></p>
}
else
{
    <div class="table-responsive text-nowrap">
        <table class="table table-striped align-middle">
            <thead>
                <tr>
                    <th>#</th>
                    <th>@SharedResource["State"]</th>
                    <th>@SharedResource["Name"]</th>
                    <th>@SharedResource["Start Date Time"]</th>
                    <th>@SharedResource["Stop Date Time"]</th>
                    <th>@SharedResource["Duration"]</th>
                    <th>@SharedResource["Description"]</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activity in _items)
                {
                    <tr>
                        <td>
                            <div class="btn-toolbar" role="toolbar" aria-label="Toolbar with button groups">
                                <div class="btn-group me-2" role="group" aria-label="First group">
                                    <a class="btn btn-outline-secondary btn-sm" href=@($"activities/{activity.Id}")>
                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                    </a>
                                    <button class="btn btn-outline-danger btn-sm" onclick=@(() => Delete(activity.Id, activity.Version))>
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        </td>
                        <td>@activity.State</td>
                        <td>@activity.Name</td>
                        <td>@activity.StartDateTime</td>
                        <td>@activity.StopDateTime</td>
                        <td>@activity.Duration</td>
                        <td>@activity.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private readonly ObservableCollection<ActivityQueryItem>? _items = new ObservableCollection<ActivityQueryItem>();

    protected override async Task OnInitializedAsync()
    {
        var x = Observable.FromEventPattern<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>(h => _items.CollectionChanged += h, h => _items.CollectionChanged -= h)
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe((x) =>
            {
                StateHasChanged();
            });

        var y = EventHubClient.Notification
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe(async (x) =>
            {
                await Refresh();
            });

        await Refresh();
    }

    private async Task Refresh()
    {
        var request = new GetActivitiesRequest { };

        var response = await Mediator.Send<GetActivitiesResponse>(request);

        _items.Clear();

        foreach (var item in response.ActivityQueryItems)
        {
            _items.Add(item);
        }
    }

    private async Task Add()
    {
        var now = DateTime.Now;

        var request = new PostActivityRequest
            {
                StartDateTime = now,
                Description = Guid.NewGuid().ToString()
            };

        var response = await Mediator.Send<PostActivityResponse>(request);

        await Refresh();
    }

    private async Task Delete(Guid id, long version)
    {
        var request = new DeleteActivityRequest
            {
                Id = id,
                Version = version
            };

        var response = await Mediator.Send<DeleteActivityResponse>(request);

        await Refresh();
    }
}
