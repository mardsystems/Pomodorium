@page "/activities"
@using MediatR;
@using Microsoft.AspNetCore.Authorization
@using Pomodorium.Hubs;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@using System.Reactive.Subjects;
@using Pomodorium.Features.ActivityManager
@attribute [Authorize]
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@* @inject EventHubClient EventHubClient *@
@inject IStringLocalizer<SharedResource> SharedResource

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>

<PageTitle>Activities</PageTitle>

<MudToolBar>
    <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
    <MudIconButton Icon="@Icons.Material.Outlined.Refresh" Color="Color.Inherit" OnClick="Refresh" />
    <MudSpacer />
    <MudText Typo="Typo.button" Class="mx-4" Style="text-wrap: nowrap">Total: @_items?.Count</MudText>
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>

    <MudContainer MaxWidth="MaxWidth.Large" Class="">
        @* <MudText Typo="Typo.h3" GutterBottom="true">Activities</MudText> *@
        @* <MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText> *@

        @if (_items == null)
    {
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else
    {
        @* <MudDataGrid @ref="_mudTable" Style="white-space: nowrap"
                     Groupable="true" Items="Model.Items" Dense="_dataGridDense" Hover="true" Striped="true" MultiSelection="true"
                     SelectOnRowClick="false" T="IndexViewModel.Item" @bind-SelectedItems="_selectedItems">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Flows</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="IndexViewModel.Item" />
                <TemplateColumn Title="@SharedResource["State"]">
                    <CellTemplate>
                        <MudText Class="d-flex">
                            @if (@context.Item.State == FlowtimeStateEnum.NotStarted)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.PauseCircle" Title="Not Started" />
                        }
                        else if (@context.Item.State == FlowtimeStateEnum.Flow)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.ArrowCircleRight" Color="Color.Info" Title="Flow" />
                        }
                        else if (@context.Item.State == FlowtimeStateEnum.Stopped)
                        {
                            <MudIcon Icon="@Icons.Material.TwoTone.CheckCircle" Color="Color.Success" Title="Stopped" />
                        }
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.TaskDescription" Title="@SharedResource["Task"]" />
            <PropertyColumn Property="x => x.StartDateTime" Title="@SharedResource["Start Date Time"]" />
            <PropertyColumn Property="x => x.StopDateTime" Title="@SharedResource["Stop Date Time"]" />
            <PropertyColumn Property="x => x.Interrupted" Title="@SharedResource["Interrupted?"]" Hideable="true" />
            <PropertyColumn Property="x => x.Worktime" Title="@SharedResource["Worktime"]" />
            <PropertyColumn Property="x => x.Breaktime" Title="@SharedResource["Breaktime"]" />
            <PropertyColumn Property="x => x.CreationDate" Title="@SharedResource["Creation Date"]" Hideable="true" />
            <TemplateColumn StickyRight="true" Sortable="false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Add" OnClick="@(() => Continue(context.Item.TaskId))"></MudIconButton>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => Details(context.Item.Id))"></MudIconButton>
                    @if (context.Item.State == FlowtimeStateEnum.NotStarted)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.PlayArrow" OnClick="@(() => Start(context.Item.Id, context.Item.Version))"></MudIconButton>
                    }
                    else if (context.Item.State == FlowtimeStateEnum.Flow)
                    {
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Stop" OnClick="@(() => Stop(context.Item.Id, context.Item.Version))"></MudIconButton>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Pause" OnClick="@(() => Interrupt(context.Item.Id, context.Item.Version))"></MudIconButton>
                    }
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid> *@

        <MudTable Items="_items" Hover="true" Striped="true" SortLabel="@SharedResource["Sort By"]" @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent" T="ActivityQueryItem" Style="cursor: pointer">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<ActivityQueryItem, object>(x => x.State!)">@SharedResource["State"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ActivityQueryItem, object>(x => x.Name!)">@SharedResource["Name"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ActivityQueryItem, object>(x => x.StartDateTime)" InitialDirection="SortDirection.Ascending">@SharedResource["Start Date Time"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ActivityQueryItem, object>(x => x.StopDateTime)">@SharedResource["Stop Date Time"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ActivityQueryItem, object>(x => x.Duration)">@SharedResource["Duration"]</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<ActivityQueryItem, object>(x => x.Description!)">@SharedResource["Description"]</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@SharedResource["State"]">@context.State</MudTd>
                    <MudTd DataLabel="@SharedResource["Name"]">@context.Name</MudTd>
                    <MudTd DataLabel="@SharedResource["Start Date Time"]">@context.StartDateTime</MudTd>
                    <MudTd DataLabel="@SharedResource["Stop Date Time"]">@context.StopDateTime</MudTd>
                    <MudTd DataLabel="@SharedResource["Duration"]">@context.Duration</MudTd>
                    <MudTd DataLabel="@SharedResource["Description"]">@context.Description</MudTd>
                </RowTemplate>
            </MudTable>
    }
</MudContainer>

@code {
    private readonly ObservableCollection<ActivityQueryItem> _items = new ObservableCollection<ActivityQueryItem>();

    private MudTable<ActivityQueryItem> mudTable = default!;

    private int selectedRowNumber = -1;

    protected override async Task OnInitializedAsync()
    {
        var x = Observable.FromEventPattern<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>(h => _items.CollectionChanged += h, h => _items.CollectionChanged -= h)
            .Throttle(TimeSpan.FromSeconds(1))
            .Subscribe((x) =>
            {
                StateHasChanged();
            });

        // var y = EventHubClient.Notification
        //     .Throttle(TimeSpan.FromSeconds(1))
        //     .Subscribe(async (x) =>
        //     {
        //         await Refresh();
        //     });

        await Refresh();
    }

    // protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await base.OnAfterRenderAsync(firstRender);

    //     if (firstRender)
    //     {
    //         await _mudTable.SetSortAsync("CreationDate", SortDirection.Descending, (x) => x.CreationDate);
    //     }
    // }

    private async Task Refresh()
    {
        var request = new ActivityQueryRequest { };

        var response = await Mediator.Send<ActivityQueryResponse>(request);

        _items.Clear();

        foreach (var item in response.ActivityQueryItems)
        {
            _items.Add(item);
        }
    }

    private async Task Add()
    {
        NavigationManager.NavigateTo($"/activities/new");

        await Task.CompletedTask;
    }

    private async Task Add2()
    {
        var now = DateTime.Now;

        var request = new ActivityCreationRequest
            {
                Name = "",
                StartDateTime = now,
                Description = Guid.NewGuid().ToString()
            };

        var response = await Mediator.Send<ActivityCreationResponse>(request);

        await Refresh();
    }

    private async Task Delete(Guid id, long version)
    {
        var request = new ActivityDeletionRequest
            {
                Id = id,
                Version = version
            };

        var response = await Mediator.Send<ActivityDeletionResponse>(request);

        await Refresh();
    }

    private void RowClickEvent(TableRowClickEventArgs<ActivityQueryItem> e)
    {
        // clickedEvents.Add("Row has been clicked");
    }

    private string SelectedRowClassFunc(ActivityQueryItem element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            // clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            // clickedEvents.Add($"Selected Row: {rowNumber}");

            NavigationManager.NavigateTo($"/activities/{mudTable.SelectedItem.Id}");

            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
}
