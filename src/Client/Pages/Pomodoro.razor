@page "/pomodori/{id}"
@using Pomodorium.Modules.Pomodori;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.EventStore;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@inject HttpClient Http
@inject IStringLocalizer<SharedResource> SharedResource;

<PageTitle>Pomodoro</PageTitle>

<h1>Pomodoro</h1>

<button class="btn btn-primary" @onclick="Save">@SharedResource["Save"]</button>


@code {
    [Parameter]
    public string? Id { get; set; }

    private PomodoroDetails? _pomodoro;

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetFromJsonAsync<GetPomodoriResponse>("api/pomodori");

        // _pomodori = response.PomodoroQueryItems;

        // _pomodori = await PomodoroQueryDbService.QueryPomodoroItems();

        // var x = Observable.FromEventPattern<NotifyCollectionChangedEventHandler, NotifyCollectionChangedEventArgs>(h => _pomodori.CollectionChanged += h, h => _pomodori.CollectionChanged -= h)
        //     .Throttle(TimeSpan.FromSeconds(1))
        //     .Subscribe((x) =>
        //     {
        //         StateHasChanged();
        //     });
    }

    private async Task Save()
    {
        var now = DateTime.Now;

        var request = new PostPomodoroRequest
            {
                StartDateTime = now,
                Description = Guid.NewGuid().ToString()
            };

        await Http.PostAsJsonAsync<PostPomodoroRequest>("api/Pomodori", request, CancellationToken.None);

        // var id = new PomodoroId(Guid.NewGuid().ToString());

        // var now = DateTime.Now;

        // var pomodoro = new Pomodoro(id, now, id.ToString());

        // await PomodoroRepository.Add(pomodoro);
    }
}
