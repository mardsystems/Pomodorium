@page "/timers/{Id}"
@using MediatR;
@using Pomodorium.Modules.Timers;
@using Pomodorium.Shared
@using System.DomainModel;
@using System.DomainModel.Storage;
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Reactive.Linq;
@using System.Reactive.Threading.Tasks;
@inject IMediator Mediator
@inject IStringLocalizer<SharedResource> SharedResource;
@inject NavigationManager Navigation;

<PageTitle>Pomodoro</PageTitle>

<h1>Pomodoro</h1>

@if (Model == null)
{
    <p><em>@SharedResource["Loading"]...</em></p>
}
else
{
    <div>
        @* <div asp-validation-summary="ModelOnly" class="text-danger"></div> *@
        <div class="row mb-3">
            <label class="col-sm-3 col-form-label">Start Date Time</label>
            <div class="col-sm-9">
                <input @bind="Model.StartDateTime" class="form-control" disabled />
                @*<span asp-validation-for="Model.StartDateTime" class="text-danger"></span>*@
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-sm-3 col-form-label">Description</label>
            <div class="col-sm-9">
                <input @bind="Model.Description" class="form-control" />
                @*<span asp-validation-for="Model.Description" class="text-danger"></span>*@
            </div>
        </div>
        <div class="row mb-3">
            <label class="col-sm-3 col-form-label">Version</label>
            <div class="col-sm-9">
                <input @bind="Model.Version" class="form-control" />
                @*<span asp-validation-for="Model.Version" class="text-danger"></span>*@
            </div>
        </div>
        @* <input type="hidden" @bind="Model.Version" /> *@
        <button class="btn btn-primary" @onclick="Save">
            @* <i class="bi bi-save"></i> *@
            @SharedResource["Save"]
        </button>
        <button class="btn btn-danger" @onclick="Delete">
            @* <i class="bi bi-save"></i> *@
            @SharedResource["Delete"]
        </button>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    public PomodoroDetails? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == null || Id == "new")
        {
            Model = new PomodoroDetails { };
        }
        else
        {
            var request = new GetPomodoroRequest { Id = Guid.Parse(Id) };

            var response = await Mediator.Send<GetPomodoroResponse>(request);

            Model = response.PomodoroDetails;
        }
    }

    private async Task Save()
    {
        if (Id == null || Id == "new")
        {
            var now = DateTime.Now;

            var request = new PostPomodoroRequest
                {
                    StartDateTime = now,
                    Description = Model.Description
                };

            var response = await Mediator.Send<PostPomodoroResponse>(request);
        }
        else
        {
            var request = new PutPomodoroRequest
                {
                    Id = Guid.Parse(Id),
                    Description = Model.Description,
                    Version = Model.Version
                };

            var response = await Mediator.Send<PutPomodoroResponse>(request);
        }

        Navigation.NavigateTo("timers");
    }

    private async Task Delete()
    {
        if (Id == null || Id == "new")
        {
            return;
        }

        var request = new DeletePomodoroRequest
            {
                Id = Guid.Parse(Id),
                Version = Model.Version
            };

        var response = await Mediator.Send<DeletePomodoroResponse>(request);

        Navigation.NavigateTo("timers");
    }
}
