@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client;
@using Pomodorium.Hubs;
@inject HubConnection HubConnection
@inject EventHubClient EventHubClient
@inject IStringLocalizer<SharedResource> SharedResource

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="input-group">
                <span role="status">@SharedResource["Notifications"]: @NotificationTotal</span>
            </div>
            <button class="btn btn-outline-secondary me-2" @onclick="DispatchEvents">
                <span class="oi oi-command" aria-hidden="true"></span>
            </button>
            <button class="btn btn-outline-secondary" @onclick="ToogleConnection">
                @if (@HubConnection.State == HubConnectionState.Disconnected)
                {
                    <img class="rounded-circle text-secondary bg-secondary" width="16" height="16" />
                }
                else if (@HubConnection.State == HubConnectionState.Connected)
                {
                    <img class="rounded-circle bg-success" width="16" height="16" />
                }
                else
                {
                    <span class="spinner-grow text-success" role="status" style="width: 16px; height: 16px">
                        <span class="visually-hidden">@SharedResource["Loading"]...</span>
                    </span>
                }
            </button>
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">@SharedResource["About"]</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private long NotificationTotal;

    protected override async Task OnInitializedAsync()
    {
        EventHubClient.Notification.Subscribe((e) =>
        {
            NotificationTotal += 1;

            InvokeAsync(StateHasChanged);
        });

        await Task.CompletedTask;
    }

    private async Task ToogleConnection()
    {
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
        else if (HubConnection.State == HubConnectionState.Connected)
        {
            await HubConnection.StopAsync();
        }
    }

    private async Task DispatchEvents()
    {
        await EventHubClient.DispatchEvents();
    }
}