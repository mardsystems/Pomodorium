@inherits LayoutComponentBase
@* @inject HubConnection HubConnection *@
@* @inject EventHubClient EventHubClient *@

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="@((e) => DrawerToggle())" />
        @if (!_drawerOpen)
        {
            <MudText Typo="Typo.h6">Pomodorium</MudText>
        }
        <MudSpacer />
        <LoginDisplay />
        @* <MudIconButton Icon="@Icons.Material.Filled.CloudDownload" Color="Color.Inherit" OnClick="DispatchEvents" Title="Dispatch Events" /> *@
        @* <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Href="https://mudblazor.com/" Target="_blank" /> *@
        @* <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor/" Target="_blank" /> *@
        @* <div Class="d-flex align-center justify-center my-auto">
        <MudBadge Overlap="true" Color="Color.Success" Origin="Origin.TopRight" Dot="true" Visible="_isHubConnected">
        <MudToggleIconButton Toggled="@_isHubConnected" ToggledChanged="OnToogleHubConnection"
        Icon="@Icons.Material.Filled.CloudOff" Color="@Color.Inherit" Title="Connect Hub"
        ToggledIcon="@Icons.Material.Filled.CloudQueue" ToggledColor="@Color.Inherit" ToggledTitle="Disconnect Hub" />
        </MudBadge>
        </div> *@
        @* <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode" /> *@
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Pomodorium</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@* <div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
            <LoginDisplay />
            <div class="input-group">
                <span role="status">@SharedResource["Notifications"]: @NotificationTotal</span>
            </div>
            <button class="btn btn-outline-secondary me-2" @onclick="DispatchEvents">
                <span class="oi oi-command" aria-hidden="true"></span>
            </button>
            <button class="btn btn-outline-secondary" @onclick="ToogleConnection">
                @if (@HubConnection.State == HubConnectionState.Disconnected)
                {
                    <img class="rounded-circle text-secondary bg-secondary" width="16" height="16" />
                }
                else if (@HubConnection.State == HubConnectionState.Connected)
                {
                    <img class="rounded-circle bg-success" width="16" height="16" />
                }
                else
                {
                    <span class="spinner-grow text-success" role="status" style="width: 16px; height: 16px">
                        <span class="visually-hidden">@SharedResource["Loading"]...</span>
                    </span>
                }
            </button>
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">@SharedResource["About"]</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private long NotificationTotal;

    protected override async Task OnInitializedAsync()
    {
        EventHubClient.Notification.Subscribe((e) =>
        {
            NotificationTotal += 1;

            InvokeAsync(StateHasChanged);
        });

        await Task.CompletedTask;
    }

    private async Task ToogleConnection()
    {
        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
        else if (HubConnection.State == HubConnectionState.Connected)
        {
            await HubConnection.StopAsync();
        }
    }

    private async Task DispatchEvents()
    {
        await EventHubClient.DispatchEvents();
    }
} *@